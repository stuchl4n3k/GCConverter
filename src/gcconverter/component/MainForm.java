/*
 * MainForm.java
 *
 * Created on 24.3.2012, 22:20:20
 */
package gcconverter.component;

import gcconverter.control.ExportController;
import gcconverter.control.ImportController;
import gcconverter.control.MainController;
import gcconverter.entity.Waypoint;
import gcconverter.util.GCCipher;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author stuchl4n3k
 */
public class MainForm extends javax.swing.JFrame {

    private MainController controller;

    /** Creates new form MainForm */
    public MainForm(MainController controller) {
        this.controller = controller;
        initComponents();
        initMyComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        formPanel = new javax.swing.JPanel();
        idLabel = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        typeLabel = new javax.swing.JLabel();
        idField = new javax.swing.JTextField();
        latField = new javax.swing.JTextField();
        lonField = new javax.swing.JTextField();
        hintField = new javax.swing.JTextField();
        sizeField = new javax.swing.JTextField();
        nameLabel = new javax.swing.JLabel();
        latLabel = new javax.swing.JLabel();
        lonLabel = new javax.swing.JLabel();
        hintLabel = new javax.swing.JLabel();
        sizeLabel = new javax.swing.JLabel();
        decryptButton = new javax.swing.JButton();
        sizeIconLabel = new javax.swing.JLabel();
        tablePanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        cacheTable = new javax.swing.JTable();
        toolbar = new javax.swing.JToolBar();
        importLOCButton = new javax.swing.JButton();
        exportLMXAllButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        exportLMXButton = new javax.swing.JButton();
        reloadButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        menuImport = new javax.swing.JMenuItem();
        menuExportAll = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        menuExit = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        menuAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("GC Converter 1.1");
        setExtendedState(JFrame.MAXIMIZED_BOTH);

        formPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        idLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        idLabel.setText("ID");

        nameField.setEditable(false);
        nameField.setFocusable(false);

        typeLabel.setFocusable(false);

        idField.setEditable(false);
        idField.setFocusable(false);

        latField.setEditable(false);
        latField.setFocusable(false);

        lonField.setEditable(false);
        lonField.setFocusable(false);

        hintField.setEditable(false);
        hintField.setFocusable(false);

        sizeField.setEditable(false);
        sizeField.setFocusable(false);

        nameLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        nameLabel.setText("Cache name");

        latLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        latLabel.setText("Latitude");

        lonLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lonLabel.setText("Longitude");

        hintLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        hintLabel.setText("Hint");

        sizeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        sizeLabel.setText("Size");

        decryptButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gcconverter/resources/icons/decrypt.png"))); // NOI18N
        decryptButton.setText("decrypt");
        decryptButton.setMargin(new java.awt.Insets(2, 7, 2, 14));
        decryptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decryptButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout formPanelLayout = new javax.swing.GroupLayout(formPanel);
        formPanel.setLayout(formPanelLayout);
        formPanelLayout.setHorizontalGroup(
            formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(latLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lonLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hintLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sizeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(idLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(idField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)
                    .addComponent(sizeField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)
                    .addComponent(hintField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)
                    .addComponent(lonField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)
                    .addComponent(latField, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)
                    .addComponent(nameField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE))
                .addGap(10, 10, 10)
                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(formPanelLayout.createSequentialGroup()
                        .addComponent(typeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sizeIconLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(decryptButton))
                .addContainerGap(65, Short.MAX_VALUE))
        );
        formPanelLayout.setVerticalGroup(
            formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(formPanelLayout.createSequentialGroup()
                        .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(formPanelLayout.createSequentialGroup()
                                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(idLabel)
                                    .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(nameLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(latField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(latLabel)))
                            .addComponent(typeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lonField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lonLabel)))
                    .addComponent(sizeIconLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hintField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hintLabel)
                    .addComponent(decryptButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sizeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sizeLabel))
                .addGap(29, 29, 29))
        );

        cacheTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        cacheTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_NEXT_COLUMN);
        cacheTable.setFillsViewportHeight(true);
        cacheTable.getTableHeader().setReorderingAllowed(false);
        cacheTable.setUpdateSelectionOnSort(false);
        cacheTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cacheTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(cacheTable);

        javax.swing.GroupLayout tablePanelLayout = new javax.swing.GroupLayout(tablePanel);
        tablePanel.setLayout(tablePanelLayout);
        tablePanelLayout.setHorizontalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 646, Short.MAX_VALUE)
        );
        tablePanelLayout.setVerticalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
        );

        toolbar.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        toolbar.setFloatable(false);
        toolbar.setRollover(true);

        importLOCButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gcconverter/resources/icons/import.png"))); // NOI18N
        importLOCButton.setText("import");
        importLOCButton.setToolTipText("import LOC");
        importLOCButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        importLOCButton.setFocusable(false);
        importLOCButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        importLOCButton.setIconTextGap(2);
        importLOCButton.setMargin(new java.awt.Insets(2, 10, 2, 10));
        importLOCButton.setMaximumSize(new java.awt.Dimension(70, 60));
        importLOCButton.setMinimumSize(new java.awt.Dimension(70, 60));
        importLOCButton.setPreferredSize(new java.awt.Dimension(70, 60));
        importLOCButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        importLOCButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importLOCButtonActionPerformed(evt);
            }
        });
        toolbar.add(importLOCButton);

        exportLMXAllButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gcconverter/resources/icons/export_all.png"))); // NOI18N
        exportLMXAllButton.setText("export all");
        exportLMXAllButton.setToolTipText("export all caches to LMX");
        exportLMXAllButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        exportLMXAllButton.setFocusable(false);
        exportLMXAllButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        exportLMXAllButton.setIconTextGap(2);
        exportLMXAllButton.setMargin(new java.awt.Insets(2, 10, 2, 10));
        exportLMXAllButton.setMaximumSize(new java.awt.Dimension(70, 60));
        exportLMXAllButton.setMinimumSize(new java.awt.Dimension(70, 60));
        exportLMXAllButton.setOpaque(false);
        exportLMXAllButton.setPreferredSize(new java.awt.Dimension(70, 60));
        exportLMXAllButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        exportLMXAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportLMXAllButtonActionPerformed(evt);
            }
        });
        toolbar.add(exportLMXAllButton);
        toolbar.add(jSeparator1);

        exportLMXButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gcconverter/resources/icons/export.png"))); // NOI18N
        exportLMXButton.setText("export");
        exportLMXButton.setToolTipText("export this cache to LMX");
        exportLMXButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        exportLMXButton.setFocusable(false);
        exportLMXButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        exportLMXButton.setIconTextGap(2);
        exportLMXButton.setMargin(new java.awt.Insets(2, 10, 2, 10));
        exportLMXButton.setMaximumSize(new java.awt.Dimension(70, 60));
        exportLMXButton.setMinimumSize(new java.awt.Dimension(70, 60));
        exportLMXButton.setOpaque(false);
        exportLMXButton.setPreferredSize(new java.awt.Dimension(70, 60));
        exportLMXButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        exportLMXButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportLMXButtonActionPerformed(evt);
            }
        });
        toolbar.add(exportLMXButton);

        reloadButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gcconverter/resources/icons/refresh.png"))); // NOI18N
        reloadButton.setText("reload");
        reloadButton.setToolTipText("reloads the selected cache");
        reloadButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        reloadButton.setFocusable(false);
        reloadButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        reloadButton.setIconTextGap(2);
        reloadButton.setMargin(new java.awt.Insets(2, 10, 2, 10));
        reloadButton.setMaximumSize(new java.awt.Dimension(70, 60));
        reloadButton.setMinimumSize(new java.awt.Dimension(70, 60));
        reloadButton.setOpaque(false);
        reloadButton.setPreferredSize(new java.awt.Dimension(70, 60));
        reloadButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        reloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reloadButtonActionPerformed(evt);
            }
        });
        toolbar.add(reloadButton);

        removeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gcconverter/resources/icons/delete.png"))); // NOI18N
        removeButton.setText("delete");
        removeButton.setToolTipText("removes the selected cache");
        removeButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        removeButton.setFocusable(false);
        removeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        removeButton.setIconTextGap(2);
        removeButton.setMargin(new java.awt.Insets(2, 10, 2, 10));
        removeButton.setMaximumSize(new java.awt.Dimension(70, 60));
        removeButton.setMinimumSize(new java.awt.Dimension(70, 60));
        removeButton.setOpaque(false);
        removeButton.setPreferredSize(new java.awt.Dimension(70, 60));
        removeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });
        toolbar.add(removeButton);

        fileMenu.setText("File");

        menuImport.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        menuImport.setText("import LOC");
        menuImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuImportActionPerformed(evt);
            }
        });
        fileMenu.add(menuImport);

        menuExportAll.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        menuExportAll.setText("export all caches to LMX");
        menuExportAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuExportAllActionPerformed(evt);
            }
        });
        fileMenu.add(menuExportAll);
        fileMenu.add(jSeparator2);

        menuExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        menuExit.setText("Exit");
        menuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuExitActionPerformed(evt);
            }
        });
        fileMenu.add(menuExit);

        jMenuBar1.add(fileMenu);

        helpMenu.setText("Help");

        menuAbout.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        menuAbout.setText("About GCConverter");
        menuAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAboutActionPerformed(evt);
            }
        });
        helpMenu.add(menuAbout);

        jMenuBar1.add(helpMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(toolbar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 646, Short.MAX_VALUE)
            .addComponent(tablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(formPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(toolbar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(formPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cacheTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cacheTableMouseClicked
        int row = cacheTable.getSelectedRow();
        String id = (String) cacheTable.getModel().getValueAt(row, 0);
        Waypoint w = controller.getWaypointById(id);
        openWaypoint(w);
    }//GEN-LAST:event_cacheTableMouseClicked

    private void decryptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decryptButtonActionPerformed
        encryptHint();
    }//GEN-LAST:event_decryptButtonActionPerformed

    private void exportLMXAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportLMXAllButtonActionPerformed
        exportLMX(true);
    }//GEN-LAST:event_exportLMXAllButtonActionPerformed

    private void importLOCButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importLOCButtonActionPerformed
        importLOC();
    }//GEN-LAST:event_importLOCButtonActionPerformed

    private void reloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reloadButtonActionPerformed
        reloadCurrentWaypoint();
    }//GEN-LAST:event_reloadButtonActionPerformed

    private void exportLMXButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportLMXButtonActionPerformed
        exportLMX(false);
    }//GEN-LAST:event_exportLMXButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        removeCurrentWaypoint();
    }//GEN-LAST:event_removeButtonActionPerformed

    private void menuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuExitActionPerformed
        dispose();
        System.exit(0);
    }//GEN-LAST:event_menuExitActionPerformed

    private void menuImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuImportActionPerformed
        importLOC();
    }//GEN-LAST:event_menuImportActionPerformed

    private void menuExportAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuExportAllActionPerformed
        exportLMX(true);
    }//GEN-LAST:event_menuExportAllActionPerformed

    private void menuAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAboutActionPerformed
        AboutDialog about = new AboutDialog(this, true);
        about.setVisible(true);
    }//GEN-LAST:event_menuAboutActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable cacheTable;
    private javax.swing.JButton decryptButton;
    private javax.swing.JButton exportLMXAllButton;
    private javax.swing.JButton exportLMXButton;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JPanel formPanel;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JTextField hintField;
    private javax.swing.JLabel hintLabel;
    private javax.swing.JTextField idField;
    private javax.swing.JLabel idLabel;
    private javax.swing.JButton importLOCButton;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JTextField latField;
    private javax.swing.JLabel latLabel;
    private javax.swing.JTextField lonField;
    private javax.swing.JLabel lonLabel;
    private javax.swing.JMenuItem menuAbout;
    private javax.swing.JMenuItem menuExit;
    private javax.swing.JMenuItem menuExportAll;
    private javax.swing.JMenuItem menuImport;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JButton reloadButton;
    private javax.swing.JButton removeButton;
    private javax.swing.JTextField sizeField;
    private javax.swing.JLabel sizeIconLabel;
    private javax.swing.JLabel sizeLabel;
    private javax.swing.JPanel tablePanel;
    private javax.swing.JToolBar toolbar;
    private javax.swing.JLabel typeLabel;
    // End of variables declaration//GEN-END:variables
    private FileFilter locFileFilter;
    private FileFilter lmxFileFilter;

    private void initMyComponents() {
        fileChooser.resetChoosableFileFilters();
        fileChooser.setAcceptAllFileFilterUsed(false);
        locFileFilter = new LocFileFilter();
        lmxFileFilter = new LmxFileFilter();
        disableControls();
        refreshTable();
    }

    private void disableControls() {
        idField.setText(null);
        nameField.setText(null);
        latField.setText(null);
        lonField.setText(null);
        hintField.setText(null);
        typeLabel.setIcon(null);
        sizeLabel.setIcon(null);
        sizeIconLabel.setIcon(null);
        exportLMXButton.setEnabled(false);
        reloadButton.setEnabled(false);
        removeButton.setEnabled(false);
        decryptButton.setEnabled(false);
    }

    private void openWaypoint(Waypoint w) {
        if (w == null) {
            return;
        }
        controller.setCurrentWaypoint(w);
        refreshCurrentWaypoint();
    }

    private void refreshCurrentWaypoint() {
        Waypoint w = controller.getCurrentWaypoint();
        if (w == null) {
            return;
        }
        idField.setText(w.getId());
        nameField.setText(w.getName());
        latField.setText(w.getLatitude() + "");
        lonField.setText(w.getLongitude() + "");
        hintField.setText(w.getHint());
        typeLabel.setIcon(w.getTypeIcon());
        sizeIconLabel.setIcon(w.getSizeIcon());
        sizeField.setText(w.getSize());
        exportLMXButton.setEnabled(true);
        reloadButton.setEnabled(true);
        removeButton.setEnabled(true);
        decryptButton.setEnabled(true);
    }

    private void removeCurrentWaypoint() {
        Waypoint w = controller.getCurrentWaypoint();
        if (w == null) {
            return;
        }
        int res = JOptionPane.showConfirmDialog(this, "Do you really want to delete cache:\n" + w.getName(), "Delete cache", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (res > 0) {
            return;
        }

        controller.deleteCurrentWaypoint();
        refreshTable();
        disableControls();
    }

    private void refreshTable() {
        cacheTable.removeAll();
        ArrayList<Waypoint> wpts = controller.getWaypoints();

        String[] cols = {"ID", "Name", "Type"};
        Object[][] data = new Object[wpts.size()][];
        for (int i = 0; i < wpts.size(); i++) {
            //System.out.println(wpts.get(i));
            data[i] = new Object[3];
            data[i][0] = wpts.get(i).getId();
            data[i][1] = wpts.get(i).getName();
            data[i][2] = wpts.get(i).getType();
        }

        cacheTable.setModel(new javax.swing.table.DefaultTableModel(data, cols) {

            Class[] types = new Class[]{java.lang.String.class, java.lang.String.class, java.lang.String.class};
            boolean[] canEdit = new boolean[]{false, false, false};

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
    }

    private void reloadCurrentWaypoint() {
        boolean res = controller.reloadCurrentWaypoint();
        if (!res) {
            JOptionPane.showMessageDialog(this, "Could not reload the cache. \nCheck your Internet connection.", "Connection error", JOptionPane.WARNING_MESSAGE);
            return;
        }
        refreshCurrentWaypoint();
        refreshTable();
    }

    private void encryptHint() {
        hintField.setText(GCCipher.encrypt(hintField.getText()));
    }

    private void exportLMX(boolean exportAll) {
        File source = fileChooser.getSelectedFile();
        File outputFile = null;
        String outputFileName = null;
        if (source == null) {
            outputFileName = "geocaching.lmx";
            outputFile = new File(".", outputFileName);
        } else {
            outputFileName = source.getName();
            outputFileName = outputFileName.substring(0, outputFileName.length() - 3) + "lmx";
            outputFile = new File(source, outputFileName);
        }
        outputFile = requestFileSave(outputFile);
        if (outputFile == null) {
            return;
        }

        if (exportAll) {
            ExportController.get().exportLMX(outputFile, controller.getWaypoints());
        } else {
            ExportController.get().exportLMX(outputFile, controller.getCurrentWaypoint());
        }
    }

    private void importLOC() {
	fileChooser.resetChoosableFileFilters();
	fileChooser.setAcceptAllFileFilterUsed(false);
	fileChooser.setFileFilter(locFileFilter);
	if (fileChooser.showOpenDialog(this) == JFileChooser.CANCEL_OPTION) {
	    return;
	}

        int size = controller.getWaypoints().size();
	File importFile = fileChooser.getSelectedFile();	// get file
	ArrayList<Waypoint> newWaypoints = ImportController.get().importLOC(importFile);   // import waypoints
        if (newWaypoints == null) {
            newWaypoints = new ArrayList<>();
        }
        controller.addWaypoints(newWaypoints);
	refreshTable();	// refresh view

        size = controller.getWaypoints().size() - size;
	JOptionPane.showMessageDialog(this, size + (size == 1 ? " cache was" : " caches were") + " imported");
    }

    private File requestFileSave(File output) {
        fileChooser.setSelectedFile(output);
        fileChooser.resetChoosableFileFilters();
        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.setFileFilter(lmxFileFilter);
        if (fileChooser.showSaveDialog(this) != JFileChooser.APPROVE_OPTION) {
            return null;
        }
        output = fileChooser.getSelectedFile();
        if (!output.exists()) {
            try {
                output.createNewFile();
            } catch (IOException ex) {
                System.out.println("Could not create file: " + output);
            }
        } else if (output.exists()) {
            if (!output.canWrite()) {
                System.out.println("Can not write to: " + output);
                return null;
            } else {
                int res = JOptionPane.showConfirmDialog(this, "File " + output.getName() + " already exists. Overwrite?", "File already exists", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (res > 0) {
                    return null;
                }
            }
        }
        return output;
    }
}
